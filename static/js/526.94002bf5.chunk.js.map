{"version":3,"file":"static/js/526.94002bf5.chunk.js","mappings":"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","sources":["components/appbar/title-provider/useUpdateAppBarTitle.tsx","utilities/date/dateToString.ts","utilities/date/getDateRangeFromNowToPast.ts","utilities/date/isDateValid.ts","utilities/date/stringToDate.ts","@types-and-const/@url-queries/@time-range.ts","pages/currency/components/BestInvestmentIndicator.tsx","webpack://rates/./src/pages/currency/components/CurrencyChart.module.scss?b23b","pages/currency/components/CurrencyChart.tsx","mui/app-accordion/AppAccordion.tsx","mui/app-accordion/AppAccordionDetails.tsx","mui/app-accordion/AppAccordionSummary.tsx","utilities/setQueryInURL.ts","pages/currency/components/DefaultTimeRangePicker.tsx","mui/form-elements/DatePickerField.tsx","pages/currency/components/ClearTimeRangeSelection.tsx","utilities/removeQueryFromUrl.ts","pages/currency/hooks/useUpdateTimeRangeBasedOnUrl.tsx","pages/currency/components/CustomTimeRangeSelection.tsx","pages/currency/components/TimeRangeSelection.tsx","pages/currency/hooks/useGetSelectedCurrencyFromUrl.tsx","utilities/getValueFromUrlQueryTypeGuard.ts","pages/currency/components/CurrencySelection.tsx","pages/currency/components/SelectionCriteriaSection.tsx","pages/currency/Currency.tsx"],"sourcesContent":["import { useEffect } from \"react\";\r\nimport { useSetAppBarTitleContext } from \"./AppBarTitleProvider\";\r\n\r\nconst useUpdateAppBarTitle = (title: string) => {\r\n  const setTitleContext = useSetAppBarTitleContext();\r\n\r\n  useEffect(() => {\r\n    setTitleContext(title);\r\n  }, [setTitleContext, title]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default useUpdateAppBarTitle;\r\n","export const dateToString = (date: Date) => {\r\n  let year = date.getFullYear();\r\n  let month = date.getMonth() + 1;\r\n  let day = date.getDate();\r\n\r\n  const yearString = String(year);\r\n\r\n  let monthString = String(month);\r\n\r\n  if (monthString.length < 2) {\r\n    monthString = \"0\" + monthString;\r\n  }\r\n\r\n  let dayString = String(day);\r\n\r\n  if (dayString.length < 2) {\r\n    dayString = \"0\" + dayString;\r\n  }\r\n\r\n  return `${yearString}-${monthString}-${dayString}`;\r\n};\r\n","export const getDateRangeFromNowToPast = (differenceInDays: number) => {\r\n  const endDate = new Date();\r\n  const startDate = new Date(endDate);\r\n  startDate.setDate(startDate.getDate() - differenceInDays);\r\n\r\n  return [startDate, endDate] as const;\r\n};\r\n","export const isDateValid = (date: Date) =>\r\n  date instanceof Date && !Number.isNaN(Number(date));\r\n","export const stringToDate = (dateString: string) => {\r\n  const dateFragments = dateString.match(/(\\d{4})-(\\d{2})-(\\d{2})/);\r\n\r\n  return new Date(\r\n    Number(dateFragments?.[1]),\r\n    Number(dateFragments?.[2]) - 1,\r\n    Number(dateFragments?.[3])\r\n  );\r\n};\r\n","import { dateToString } from \"../../utilities/date/dateToString\";\r\nimport { getDateRangeFromNowToPast } from \"../../utilities/date/getDateRangeFromNowToPast\";\r\nimport { isDateValid } from \"../../utilities/date/isDateValid\";\r\nimport { stringToDate } from \"../../utilities/date/stringToDate\";\r\n\r\nexport const TIME_RANGE_QUERY_IN_URL = {\r\n  key: \"time-range\" as const,\r\n  allowedValues: [\"week\", \"month\", \"3months\", \"6months\", \"max\"] as const,\r\n};\r\n\r\nexport type TimeRangeQueryInUrlKayName = typeof TIME_RANGE_QUERY_IN_URL[\"key\"];\r\n\r\nexport type TimeRangeQueryInUrlAllowedDefinedValues =\r\n  typeof TIME_RANGE_QUERY_IN_URL[\"allowedValues\"][number];\r\n\r\ntype TimeRangeQueryInUrlConfig<Union extends string> = {\r\n  readonly [Property in Union]: {\r\n    readonly queryValue: Property;\r\n    readonly valueInDays: number;\r\n    readonly uiName: string;\r\n  };\r\n};\r\n\r\nexport const TIME_RANGE_QUERY_IN_URL_CONFIG: TimeRangeQueryInUrlConfig<TimeRangeQueryInUrlAllowedDefinedValues> =\r\n  {\r\n    week: { queryValue: \"week\", valueInDays: 7, uiName: \"week\" },\r\n    month: { queryValue: \"month\", valueInDays: 31, uiName: \"month\" },\r\n    \"3months\": { queryValue: \"3months\", valueInDays: 93, uiName: \"3 months\" },\r\n    \"6months\": { queryValue: \"6months\", valueInDays: 186, uiName: \"6 months\" },\r\n    max: { queryValue: \"max\", valueInDays: 367, uiName: \"max\" },\r\n  };\r\n\r\nexport const DEFAULT_DEFINED_VALUE: TimeRangeQueryInUrlAllowedDefinedValues =\r\n  \"month\";\r\nexport const DEFAULT_TIME_RANGE_IN_DAYS =\r\n  TIME_RANGE_QUERY_IN_URL_CONFIG[DEFAULT_DEFINED_VALUE].valueInDays;\r\nexport const MAX_TIME_RANGE_IN_DAYS =\r\n  TIME_RANGE_QUERY_IN_URL_CONFIG[\"max\"].valueInDays;\r\n\r\nexport const isValidTimeRangeQueryInUrlAllowedDefinedValues = (\r\n  value: string | null | undefined\r\n): value is TimeRangeQueryInUrlAllowedDefinedValues => {\r\n  return (\r\n    TIME_RANGE_QUERY_IN_URL.allowedValues.find(\r\n      (element) => element === value\r\n    ) !== undefined\r\n  );\r\n};\r\n\r\nexport interface TimeRangeDescriptor {\r\n  readonly selectedDefinedValue: TimeRangeQueryInUrlAllowedDefinedValues | null;\r\n  readonly timeRangeForDataFetching: readonly [string, string];\r\n  readonly timeRangeForIOFields: readonly [Date, Date] | null;\r\n}\r\n\r\nconst getTimeRangeForIOFields = (\r\n  timeRangeQueryInUrl: string | null\r\n): TimeRangeDescriptor[\"timeRangeForIOFields\"] => {\r\n  const datesMatch = timeRangeQueryInUrl?.match(\r\n    /from-(\\d{4}-\\d{2}-\\d{2})-to-(\\d{4}-\\d{2}-\\d{2})/\r\n  );\r\n\r\n  if (datesMatch) {\r\n    const startDate = stringToDate(datesMatch?.[1]);\r\n    const endDate = stringToDate(datesMatch?.[2]);\r\n\r\n    if (isDateValid(startDate) && isDateValid(endDate)) {\r\n      return [startDate, endDate] as const;\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\nexport const getTimeRangeDescriptorFromUrlQuery = (\r\n  timeRangeQueryInUrl: string | null\r\n): TimeRangeDescriptor => {\r\n  let selectedDefinedValue: TimeRangeDescriptor[\"selectedDefinedValue\"] = null;\r\n\r\n  const timeRangeForIOFields: TimeRangeDescriptor[\"timeRangeForIOFields\"] =\r\n    getTimeRangeForIOFields(timeRangeQueryInUrl);\r\n\r\n  let timeRangeForDataFetching: readonly [Date, Date] =\r\n    timeRangeForIOFields ??\r\n    getDateRangeFromNowToPast(DEFAULT_TIME_RANGE_IN_DAYS);\r\n\r\n  if (!timeRangeQueryInUrl) {\r\n    selectedDefinedValue = DEFAULT_DEFINED_VALUE;\r\n  } else if (\r\n    isValidTimeRangeQueryInUrlAllowedDefinedValues(timeRangeQueryInUrl)\r\n  ) {\r\n    selectedDefinedValue = timeRangeQueryInUrl;\r\n\r\n    if (timeRangeQueryInUrl !== DEFAULT_DEFINED_VALUE) {\r\n      timeRangeForDataFetching = getDateRangeFromNowToPast(\r\n        TIME_RANGE_QUERY_IN_URL_CONFIG[timeRangeQueryInUrl].valueInDays\r\n      );\r\n    }\r\n  }\r\n\r\n  return {\r\n    selectedDefinedValue,\r\n    timeRangeForDataFetching: [\r\n      dateToString(timeRangeForDataFetching[0]),\r\n      dateToString(timeRangeForDataFetching[1]),\r\n    ] as const,\r\n    timeRangeForIOFields,\r\n  };\r\n};\r\n","import { Skeleton, Typography } from \"@mui/material\";\r\nimport { useMemo } from \"react\";\r\nimport { CurrencyRate } from \"../../../api/currency/models\";\r\n\r\ninterface BestInvestmentIndicatorProps {\r\n  rates: CurrencyRate[\"rates\"] | undefined;\r\n  isFetching: boolean;\r\n}\r\n\r\ninterface BestInvestment {\r\n  refund: number;\r\n  refundInPercentage: number;\r\n  buyDate: string | null;\r\n  sellDate: string | null;\r\n}\r\n\r\nconst BestInvestmentIndicator = ({\r\n  rates,\r\n  isFetching,\r\n}: BestInvestmentIndicatorProps) => {\r\n  const bestInvestment = useMemo(() => {\r\n    return rates?.reduce<BestInvestment | null>(\r\n      (previousBestInvestment, buyRate, buyRateIndex, array) => {\r\n        const ratesSinceBuyRate = array.slice(buyRateIndex);\r\n\r\n        const maxRateSinceBuyRate = ratesSinceBuyRate.reduce(\r\n          (prevMaxRate, rate) => {\r\n            if (prevMaxRate.mid < rate.mid) {\r\n              return rate;\r\n            }\r\n\r\n            return prevMaxRate;\r\n          }\r\n        );\r\n\r\n        const maxRefund = maxRateSinceBuyRate.mid - buyRate.mid;\r\n\r\n        if (\r\n          !previousBestInvestment ||\r\n          maxRefund > previousBestInvestment.refund\r\n        ) {\r\n          return {\r\n            refund: maxRefund,\r\n            refundInPercentage: Math.floor((maxRefund / buyRate.mid) * 100),\r\n            buyDate: buyRate.effectiveDate,\r\n            sellDate: maxRateSinceBuyRate.effectiveDate,\r\n          };\r\n        }\r\n\r\n        return previousBestInvestment;\r\n      },\r\n      null\r\n    );\r\n  }, [rates]);\r\n\r\n  const displayedText = isFetching ? (\r\n    <Skeleton />\r\n  ) : bestInvestment ? (\r\n    `Best investment: ${Math.floor(bestInvestment.refund * 100) / 100}zł./${\r\n      bestInvestment.refundInPercentage\r\n    }% (buy at: ${bestInvestment.buyDate}, sell at: ${bestInvestment.sellDate})`\r\n  ) : (\r\n    \"no date to calculate result\"\r\n  );\r\n\r\n  return (\r\n    <Typography\r\n      variant=\"h4\"\r\n      sx={{ flex: \"auto\", opacity: isFetching ? 0.5 : 1 }}\r\n    >\r\n      {displayedText}\r\n    </Typography>\r\n  );\r\n};\r\n\r\nexport default BestInvestmentIndicator;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"reFetching\":\"CurrencyChart_reFetching__uZmkN\"};","import {\r\n  Area,\r\n  AreaChart,\r\n  CartesianGrid,\r\n  Legend,\r\n  ResponsiveContainer,\r\n  Tooltip,\r\n  XAxis,\r\n  YAxis,\r\n} from \"recharts\";\r\nimport { CurrencyRate } from \"../../../api/currency/models\";\r\nimport styles from \"./CurrencyChart.module.scss\";\r\nimport { Box, Skeleton } from \"@mui/material\";\r\nimport cx from \"classnames\";\r\n\r\ninterface CurrencyChartProps {\r\n  rates: CurrencyRate[\"rates\"] | undefined;\r\n  isFetching: boolean;\r\n}\r\n\r\nconst CurrencyChart = ({ rates, isFetching }: CurrencyChartProps) => {\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        minHeight: \"500px\",\r\n        flex: \"auto\",\r\n      }}\r\n    >\r\n      <ResponsiveContainer\r\n        width=\"96%\"\r\n        height={500}\r\n        className={cx({ [styles.reFetching]: isFetching })}\r\n      >\r\n        {isFetching && !rates ? (\r\n          <Skeleton\r\n            variant=\"rectangular\"\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n            animation=\"wave\"\r\n          />\r\n        ) : (\r\n          <AreaChart\r\n            width={730}\r\n            height={250}\r\n            data={rates}\r\n            margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\r\n          >\r\n            <defs>\r\n              <linearGradient id=\"colorPv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\r\n                <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\r\n              </linearGradient>\r\n            </defs>\r\n            <XAxis dataKey=\"effectiveDate\" />\r\n            <YAxis\r\n              domain={([dataMin, dataMax]: [number, number]) => {\r\n                const stroke = dataMax - dataMin;\r\n\r\n                return [\r\n                  Math.floor((dataMin - 0.1 * stroke) * 100) / 100,\r\n                  Math.ceil((dataMax + 0.1 * stroke) * 100) / 100,\r\n                ];\r\n              }}\r\n            />\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <Tooltip />\r\n            <Area\r\n              type=\"monotone\"\r\n              dataKey=\"mid\"\r\n              stroke=\"#82ca9d\"\r\n              fillOpacity={1}\r\n              fill=\"url(#colorPv)\"\r\n              name=\"rate\"\r\n              // legendType=\"diamond\"\r\n              // label\r\n            />\r\n            {/* <Legend content={renderLegend} /> */}\r\n            <Legend />\r\n          </AreaChart>\r\n        )}\r\n      </ResponsiveContainer>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CurrencyChart;\r\n","import { styled } from \"@mui/material/styles\";\r\nimport { Accordion, AccordionProps } from \"@mui/material\";\r\n\r\nexport const AppAccordion = styled((props: AccordionProps) => (\r\n  <Accordion elevation={2} square {...props} />\r\n))(({ theme }) => ({\r\n  border: `1px solid ${theme.palette.divider}`,\r\n  \"&:not(:last-child)\": {},\r\n  \"&:before\": {\r\n    display: \"none\",\r\n  },\r\n}));\r\n","import { styled } from \"@mui/material/styles\";\r\nimport { AccordionDetails } from \"@mui/material\";\r\n\r\nexport const AppAccordionDetails = styled(AccordionDetails)(({ theme }) => ({\r\n  padding: theme.spacing(2),\r\n  borderTop: \"1px solid rgba(0, 0, 0, .125)\",\r\n}));\r\n","import { styled } from \"@mui/material/styles\";\r\nimport ArrowForwardIosSharpIcon from \"@mui/icons-material/ArrowForwardIosSharp\";\r\nimport { AccordionSummary, AccordionSummaryProps } from \"@mui/material\";\r\n\r\nexport const AppAccordionSummary = styled((props: AccordionSummaryProps) => (\r\n  <AccordionSummary\r\n    expandIcon={<ArrowForwardIosSharpIcon sx={{ fontSize: \"0.9rem\" }} />}\r\n    sx={{\r\n      \"& .MuiAccordionSummary-content\": { marginLeft: \"0.5rem!important\" },\r\n      // \"&.Mui-expanded\": { marginLeft: \"0.5rem\" },\r\n    }}\r\n    {...props}\r\n  />\r\n))(({ theme }) => ({\r\n  backgroundColor:\r\n    theme.palette.mode === \"dark\"\r\n      ? \"rgba(255, 255, 255, .05)\"\r\n      : \"rgba(0, 0, 0, .03)\",\r\n  flexDirection: \"row-reverse\",\r\n}));\r\n","import { SetSearchParams } from \"../@types-and-const/@general\";\r\n\r\n/**\r\n * This function updates url query using passed setSearchParams method returned by useSearchParams hook from react-router, if last argument (queryValue)\r\n is equal to empty string, the query will be deleted from url.\r\n *\r\n * @param searchParams - URLSearchParams instance\r\n * @param setSearchParams - method returned by useSearchParams hook from react-router\r\n * @param queryKey - query key\r\n * @param queryValue - query value, if empty string, the query will be deleted from url\r\n * @returns void\r\n */\r\nexport const setQueryInUrl = <T extends string, K extends string>(\r\n  searchParams: URLSearchParams,\r\n  setSearchParams: SetSearchParams,\r\n  queryKey: T,\r\n  queryValue: K\r\n) => {\r\n  const newSearchParamsInstance = new URLSearchParams(searchParams);\r\n\r\n  if (!queryValue) {\r\n    newSearchParamsInstance.delete(queryKey);\r\n  } else {\r\n    newSearchParamsInstance.set(queryKey, queryValue);\r\n  }\r\n\r\n  setSearchParams(newSearchParamsInstance);\r\n};\r\n","import { ToggleButton, ToggleButtonGroup } from \"@mui/material\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\nimport {\r\n  getTimeRangeDescriptorFromUrlQuery,\r\n  TimeRangeQueryInUrlAllowedDefinedValues,\r\n  TIME_RANGE_QUERY_IN_URL,\r\n  TIME_RANGE_QUERY_IN_URL_CONFIG,\r\n} from \"../../../@types-and-const/@url-queries/@time-range\";\r\n\r\nimport { setQueryInUrl } from \"../../../utilities/setQueryInURL\";\r\n\r\nconst DefaultTimeRangePicker = () => {\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n\r\n  const timeRangeQueryInUrl = searchParams.get(TIME_RANGE_QUERY_IN_URL.key);\r\n\r\n  const { selectedDefinedValue } =\r\n    getTimeRangeDescriptorFromUrlQuery(timeRangeQueryInUrl);\r\n\r\n  const onChange = (\r\n    _: React.MouseEvent<HTMLElement, MouseEvent>,\r\n    value: TimeRangeQueryInUrlAllowedDefinedValues\r\n  ) => {\r\n    setQueryInUrl(\r\n      searchParams,\r\n      setSearchParams,\r\n      TIME_RANGE_QUERY_IN_URL.key,\r\n      value\r\n    );\r\n  };\r\n\r\n  return (\r\n    <ToggleButtonGroup\r\n      value={selectedDefinedValue}\r\n      exclusive\r\n      onChange={onChange}\r\n      aria-label=\"text alignment\"\r\n    >\r\n      <ToggleButton\r\n        value={TIME_RANGE_QUERY_IN_URL_CONFIG.week.queryValue}\r\n        aria-label=\"centered\"\r\n      >\r\n        {TIME_RANGE_QUERY_IN_URL_CONFIG.week.uiName}\r\n      </ToggleButton>\r\n      <ToggleButton\r\n        value={TIME_RANGE_QUERY_IN_URL_CONFIG.month.queryValue}\r\n        aria-label=\"centered\"\r\n      >\r\n        {TIME_RANGE_QUERY_IN_URL_CONFIG.month.uiName}\r\n      </ToggleButton>\r\n      <ToggleButton\r\n        value={TIME_RANGE_QUERY_IN_URL_CONFIG[\"3months\"].queryValue}\r\n        aria-label=\"centered\"\r\n      >\r\n        {TIME_RANGE_QUERY_IN_URL_CONFIG[\"3months\"].uiName}\r\n      </ToggleButton>\r\n      <ToggleButton\r\n        value={TIME_RANGE_QUERY_IN_URL_CONFIG[\"6months\"].queryValue}\r\n        aria-label=\"centered\"\r\n      >\r\n        {TIME_RANGE_QUERY_IN_URL_CONFIG[\"6months\"].uiName}\r\n      </ToggleButton>\r\n      <ToggleButton\r\n        value={TIME_RANGE_QUERY_IN_URL_CONFIG.max.queryValue}\r\n        aria-label=\"centered\"\r\n      >\r\n        {TIME_RANGE_QUERY_IN_URL_CONFIG.max.uiName}\r\n      </ToggleButton>\r\n    </ToggleButtonGroup>\r\n  );\r\n};\r\n\r\nexport default DefaultTimeRangePicker;\r\n","import { TextField } from \"@mui/material\";\r\nimport { DatePicker } from \"@mui/x-date-pickers\";\r\nimport React from \"react\";\r\n\r\nimport {\r\n  Controller,\r\n  FieldValues,\r\n  Control,\r\n  Path,\r\n  UseControllerProps,\r\n} from \"react-hook-form\";\r\n\r\ninterface DatePickerFieldProps<T extends FieldValues> {\r\n  control: Control<T>;\r\n  fieldName: Path<T>;\r\n  minAllowedDate: Date;\r\n  shouldReserveSpaceForErrorMessage?: boolean;\r\n  validationRules?: UseControllerProps<T, Path<T>>[\"rules\"];\r\n}\r\n\r\nconst DatePickerField = <T extends FieldValues>({\r\n  control,\r\n  fieldName,\r\n  minAllowedDate,\r\n  shouldReserveSpaceForErrorMessage = true,\r\n  validationRules,\r\n}: DatePickerFieldProps<T>) => {\r\n  return (\r\n    <Controller\r\n      name={fieldName}\r\n      control={control}\r\n      rules={validationRules}\r\n      render={({ field, fieldState }) => (\r\n        <DatePicker\r\n          mask={\"__.__.____\"}\r\n          disableFuture\r\n          openTo=\"month\"\r\n          views={[\"year\", \"month\", \"day\"]}\r\n          minDate={minAllowedDate}\r\n          value={field.value}\r\n          onChange={field.onChange}\r\n          inputRef={field.ref}\r\n          renderInput={(params) => (\r\n            <TextField\r\n              {...params}\r\n              name={field.name}\r\n              variant=\"standard\"\r\n              error={Boolean(fieldState.error)}\r\n              helperText={\r\n                fieldState.error\r\n                  ? fieldState.error?.message\r\n                  : shouldReserveSpaceForErrorMessage\r\n                  ? \" \"\r\n                  : \"\"\r\n              }\r\n              onBlur={field.onBlur}\r\n            />\r\n          )}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default DatePickerField;\r\n","import { IconButton } from \"@mui/material\";\r\nimport HighlightOffIcon from \"@mui/icons-material/HighlightOff\";\r\nimport { UseFormReset } from \"react-hook-form\";\r\n\r\nimport { SetSearchParams } from \"../../../@types-and-const/@general\";\r\n\r\nimport { removeQueryFromUrl } from \"../../../utilities/removeQueryFromUrl\";\r\nimport { TIME_RANGE_QUERY_IN_URL } from \"../../../@types-and-const/@url-queries/@time-range\";\r\nimport { type FormDataType } from \"./CustomTimeRangeSelection\";\r\n\r\ninterface ClearTimeRangeSelectionProps {\r\n  searchParams: URLSearchParams;\r\n  setSearchParams: SetSearchParams;\r\n  reset: UseFormReset<FormDataType>;\r\n}\r\n\r\nconst ClearTimeRangeSelection = ({\r\n  searchParams,\r\n  setSearchParams,\r\n  reset,\r\n}: ClearTimeRangeSelectionProps) => {\r\n  return (\r\n    <IconButton\r\n      type=\"button\"\r\n      aria-label=\"clear filter\"\r\n      onClick={() => {\r\n        reset();\r\n        removeQueryFromUrl(\r\n          searchParams,\r\n          setSearchParams,\r\n          TIME_RANGE_QUERY_IN_URL.key\r\n        );\r\n      }}\r\n    >\r\n      <HighlightOffIcon sx={{ fontSize: \"3rem\" }} />\r\n    </IconButton>\r\n  );\r\n};\r\n\r\nexport default ClearTimeRangeSelection;\r\n","import { SetSearchParams } from \"../@types-and-const/@general\";\r\n\r\n/**\r\n * This function removes url query using passed setSearchParams method returned by useSearchParams hook from react-router.\r\n *\r\n * @param searchParams - URLSearchParams instance\r\n * @param setSearchParams - method returned by useSearchParams hook from react-router\r\n * @param queryKey - query key\r\n * @returns void\r\n */\r\nexport const removeQueryFromUrl = <T extends string>(\r\n  searchParams: URLSearchParams,\r\n  setSearchParams: SetSearchParams,\r\n  queryKey: T\r\n) => {\r\n  const newSearchParamsInstance = new URLSearchParams(searchParams);\r\n  newSearchParamsInstance.delete(queryKey);\r\n\r\n  setSearchParams(newSearchParamsInstance);\r\n};\r\n","import { useEffect } from \"react\";\r\nimport { UseFormSetValue, UseFormGetValues } from \"react-hook-form\";\r\nimport { getTimeRangeDescriptorFromUrlQuery } from \"../../../@types-and-const/@url-queries/@time-range\";\r\nimport { type FormDataType } from \"../components/CustomTimeRangeSelection\";\r\n\r\nconst useUpdateTimeRangeBasedOnUrl = (\r\n  timeRangeQueryInUrl: string | null,\r\n  setValue: UseFormSetValue<FormDataType>,\r\n  getValues: UseFormGetValues<FormDataType>\r\n) => {\r\n  useEffect(() => {\r\n    const { timeRangeForIOFields: dates } =\r\n      getTimeRangeDescriptorFromUrlQuery(timeRangeQueryInUrl);\r\n\r\n    if (dates) {\r\n      const startDate = dates[0];\r\n      const endDate = dates[1];\r\n\r\n      if (startDate !== getValues(\"start-date\")) {\r\n        setValue(\"start-date\", startDate, { shouldValidate: true });\r\n      }\r\n\r\n      if (endDate !== getValues(\"end-date\")) {\r\n        setValue(\"end-date\", endDate, { shouldValidate: true });\r\n      }\r\n    }\r\n  }, [timeRangeQueryInUrl, setValue, getValues]);\r\n};\r\n\r\nexport default useUpdateTimeRangeBasedOnUrl;\r\n","import { Box, Button, Stack, useMediaQuery, useTheme } from \"@mui/material\";\r\nimport { useForm, SubmitHandler } from \"react-hook-form\";\r\nimport { isDateValid } from \"../../../utilities/date/isDateValid\";\r\nimport DatePickerField from \"../../../mui/form-elements/DatePickerField\";\r\nimport ClearTimeRangeSelection from \"./ClearTimeRangeSelection\";\r\nimport useUpdateTimeRangeBasedOnUrl from \"../hooks/useUpdateTimeRangeBasedOnUrl\";\r\nimport { OrNull } from \"../../../@types-and-const/@general\";\r\nimport { setQueryInUrl } from \"../../../utilities/setQueryInURL\";\r\nimport React from \"react\";\r\nimport { dateToString } from \"../../../utilities/date/dateToString\";\r\nimport {\r\n  getTimeRangeDescriptorFromUrlQuery,\r\n  TIME_RANGE_QUERY_IN_URL,\r\n} from \"../../../@types-and-const/@url-queries/@time-range\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\nimport { ObjectShape } from \"yup/lib/object\";\r\nimport * as Yup from \"yup\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n\r\nexport const MIN_ALLOWED_DATE = new Date(2014, 0, 1, 0, 0, 0);\r\nexport interface FormDataType {\r\n  \"start-date\": OrNull<Date>;\r\n  \"end-date\": OrNull<Date>;\r\n}\r\n\r\ntype FormDataTypeForYup = {\r\n  [Property in keyof FormDataType]+?: ObjectShape[string];\r\n};\r\n\r\nconst validationSchema = Yup.object<FormDataTypeForYup>({\r\n  \"start-date\": Yup.date().required(\"Required\"),\r\n  \"end-date\": Yup.date().required(\"Required\"),\r\n});\r\n\r\n// export const commonDateValidation = {\r\n//   validDate: (date: FormDataType[\"start-date\"]) =>\r\n//     (!!date && isDateValid(date)) || \"Enter valid date\",\r\n//   notFutureDate: (date: FormDataType[\"start-date\"]) =>\r\n//     (!!date && date < new Date()) || \"Future date not allowed\",\r\n//   notBeforeMinAllowedDate: (date: FormDataType[\"start-date\"]) =>\r\n//     (!!date && date > MIN_ALLOWED_DATE) ||\r\n//     `Date before ${\r\n//       MIN_ALLOWED_DATE.toLocaleString(\"pl-PL\", { timeZone: \"UTC\" }).split(\r\n//         \",\"\r\n//       )[0]\r\n//     }`,\r\n// };\r\n\r\nconst CustomTimeRangeSelection = () => {\r\n  const theme = useTheme();\r\n  const matchDownSm = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n\r\n  const {\r\n    handleSubmit,\r\n    reset,\r\n    setValue,\r\n    getValues,\r\n    control,\r\n    watch,\r\n    formState: { errors },\r\n  } = useForm<FormDataType>({\r\n    defaultValues: {\r\n      \"start-date\": null,\r\n      \"end-date\": null,\r\n    },\r\n    mode: \"all\",\r\n    criteriaMode: \"firstError\",\r\n    shouldUnregister: true,\r\n    resolver: yupResolver(validationSchema),\r\n  });\r\n\r\n  const timeRangeQueryInUrl = searchParams.get(TIME_RANGE_QUERY_IN_URL.key);\r\n\r\n  useUpdateTimeRangeBasedOnUrl(timeRangeQueryInUrl, setValue, getValues);\r\n\r\n  const { timeRangeForIOFields: dates } =\r\n    getTimeRangeDescriptorFromUrlQuery(timeRangeQueryInUrl);\r\n\r\n  const startDate = watch(\"start-date\");\r\n\r\n  const onSubmit: SubmitHandler<FormDataType> = async (values) => {\r\n    const startDate = values[\"start-date\"] as any as Date;\r\n    const endDate = values[\"end-date\"] as any as Date;\r\n\r\n    setQueryInUrl(\r\n      searchParams,\r\n      setSearchParams,\r\n      TIME_RANGE_QUERY_IN_URL.key,\r\n      \"from-\" + dateToString(startDate) + \"-to-\" + dateToString(endDate)\r\n    );\r\n  };\r\n\r\n  return (\r\n    <form noValidate onSubmit={handleSubmit(onSubmit)}>\r\n      <Stack\r\n        spacing={matchDownSm ? 1 : 3}\r\n        direction={matchDownSm ? \"column\" : \"row\"}\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n        sx={{ flexWrap: \"wrap\" }}\r\n      >\r\n        <DatePickerField\r\n          fieldName=\"start-date\"\r\n          control={control}\r\n          // validationRules={{\r\n          //   validate: {\r\n          //     ...commonDateValidation,\r\n          //   },\r\n          // }}\r\n          minAllowedDate={MIN_ALLOWED_DATE}\r\n          shouldReserveSpaceForErrorMessage={false}\r\n        />\r\n        <DatePickerField\r\n          fieldName=\"end-date\"\r\n          control={control}\r\n          // validationRules={{\r\n          //   validate: {\r\n          //     ...commonDateValidation,\r\n          //     afterStartDate: (date) => {\r\n          //       const startDate = getValues(\"start-date\");\r\n          //       console.log(\"startDate =\", startDate);\r\n          //       return (\r\n          //         (date !== null && startDate !== null && date > startDate) ||\r\n          //         \"End date after start date\"\r\n          //       );\r\n          //     },\r\n          //   },\r\n          // }}\r\n          minAllowedDate={startDate ? startDate : MIN_ALLOWED_DATE}\r\n          shouldReserveSpaceForErrorMessage={false}\r\n        />\r\n        <Box>\r\n          <Button\r\n            type=\"submit\"\r\n            size=\"large\"\r\n            variant=\"outlined\"\r\n            disabled={Boolean(Object.keys(errors).length)}\r\n          >\r\n            Select time range\r\n          </Button>\r\n          {dates !== null ? (\r\n            <ClearTimeRangeSelection\r\n              searchParams={searchParams}\r\n              setSearchParams={setSearchParams}\r\n              reset={reset}\r\n            />\r\n          ) : null}\r\n        </Box>\r\n      </Stack>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default React.memo(CustomTimeRangeSelection);\r\n","import { Box, Stack, useMediaQuery, useTheme } from \"@mui/material\";\r\nimport { isDateValid } from \"../../../utilities/date/isDateValid\";\r\nimport { OrNull } from \"../../../@types-and-const/@general\";\r\nimport React from \"react\";\r\nimport DefaultTimeRangePicker from \"./DefaultTimeRangePicker\";\r\nimport CustomTimeRangeSelection from \"./CustomTimeRangeSelection\";\r\n\r\nconst TimeRangeSelection = () => {\r\n  const theme = useTheme();\r\n  const matchDownSm = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n  const matchDownXl = useMediaQuery(theme.breakpoints.down(\"xl\"));\r\n  const matchOnlyLg = useMediaQuery(theme.breakpoints.only(\"lg\"));\r\n\r\n  const matchUpLg = useMediaQuery(theme.breakpoints.up(\"lg\"));\r\n\r\n  return (\r\n    <Box sx={{ pt: \"0.0rem\", flexGrow: 0 }}>\r\n      <Stack\r\n        spacing={matchDownSm ? 1 : 3}\r\n        direction={matchDownXl ? \"column\" : \"row\"}\r\n        alignItems={matchOnlyLg ? \"end\" : \"center\"}\r\n        justifyContent=\"center\"\r\n        sx={{ flexWrap: \"wrap\" }}\r\n      >\r\n        <DefaultTimeRangePicker />\r\n        <CustomTimeRangeSelection />\r\n      </Stack>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default React.memo(TimeRangeSelection);\r\n","import {\r\n  DEFAULT_SELECTED_CURRENCY,\r\n  isValidSelectedCurrencyQueryInUrl,\r\n  SELECTED_CURRENCY_QUERY_IN_URL_KEY_NAME,\r\n} from \"../../../@types-and-const/@url-queries/@currency\";\r\nimport { getValueFromUrlQueryTypeGuard } from \"../../../utilities/getValueFromUrlQueryTypeGuard\";\r\n\r\nconst useGetSelectedCurrencyFromUrl = (searchParams: URLSearchParams) => {\r\n  const selectedCurrency = getValueFromUrlQueryTypeGuard(\r\n    searchParams.get(SELECTED_CURRENCY_QUERY_IN_URL_KEY_NAME),\r\n    DEFAULT_SELECTED_CURRENCY,\r\n    isValidSelectedCurrencyQueryInUrl\r\n  );\r\n\r\n  return selectedCurrency;\r\n};\r\n\r\nexport default useGetSelectedCurrencyFromUrl;\r\n","export const getValueFromUrlQueryTypeGuard = <T extends E, K extends T, E>(\r\n  valueFromUrlQuery: E,\r\n  substituteValue: K,\r\n  validationFunction: (value: E) => value is T\r\n) => {\r\n  let typeGuardValue: T | K = substituteValue;\r\n\r\n  if (validationFunction(valueFromUrlQuery)) {\r\n    typeGuardValue = valueFromUrlQuery;\r\n  }\r\n\r\n  return typeGuardValue;\r\n};\r\n","import {\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  SelectChangeEvent,\r\n} from \"@mui/material\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\nimport {\r\n  EUR_CURRENCY,\r\n  SELECTED_CURRENCY_QUERY_IN_URL_KEY_NAME,\r\n  USD_CURRENCY,\r\n} from \"../../../@types-and-const/@url-queries/@currency\";\r\nimport { setQueryInUrl } from \"../../../utilities/setQueryInURL\";\r\n\r\nimport React from \"react\";\r\nimport useGetSelectedCurrencyFromUrl from \"../hooks/useGetSelectedCurrencyFromUrl\";\r\n\r\nconst CurrencySelection = () => {\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n\r\n  const selectedCurrency = useGetSelectedCurrencyFromUrl(searchParams);\r\n\r\n  const setSelectedCurrencyQueryInURL = (e: SelectChangeEvent<any>) => {\r\n    setQueryInUrl(\r\n      searchParams,\r\n      setSearchParams,\r\n      SELECTED_CURRENCY_QUERY_IN_URL_KEY_NAME,\r\n      e.target.value\r\n    );\r\n  };\r\n\r\n  return (\r\n    <FormControl variant=\"standard\" sx={{ m: 0, minWidth: \"6rem\" }}>\r\n      <InputLabel id=\"select-currency-label\">Select currency</InputLabel>\r\n      <Select\r\n        labelId=\"select-currency-label\"\r\n        id=\"select-currency\"\r\n        value={selectedCurrency}\r\n        onChange={setSelectedCurrencyQueryInURL}\r\n        label=\"Select currency\"\r\n        autoWidth\r\n      >\r\n        <MenuItem value={USD_CURRENCY}>{USD_CURRENCY}</MenuItem>\r\n        <MenuItem value={EUR_CURRENCY}>{EUR_CURRENCY}</MenuItem>\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default React.memo(CurrencySelection);\r\n","import { Box, Stack, Typography, useMediaQuery, useTheme } from \"@mui/material\";\r\nimport { AppAccordion } from \"../../../mui/app-accordion/AppAccordion\";\r\nimport { AppAccordionDetails } from \"../../../mui/app-accordion/AppAccordionDetails\";\r\nimport { AppAccordionSummary } from \"../../../mui/app-accordion/AppAccordionSummary\";\r\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\r\nimport React, { useState } from \"react\";\r\nimport TimeRangeSelection from \"./TimeRangeSelection\";\r\nimport CurrencySelection from \"./CurrencySelection\";\r\n\r\nconst SelectionCriteriaSection = () => {\r\n  const [isAccordionExpanded, SetIsAccordionExpanded] = useState(true);\r\n\r\n  const theme = useTheme();\r\n  const matchUpLg = useMediaQuery(theme.breakpoints.up(\"lg\"));\r\n\r\n  return (\r\n    <Box component=\"section\">\r\n      <AppAccordion\r\n        expanded={isAccordionExpanded}\r\n        onChange={() => SetIsAccordionExpanded((prev) => !prev)}\r\n        sx={{ mb: 3 }}\r\n      >\r\n        <AppAccordionSummary\r\n          expandIcon={<ExpandMoreIcon />}\r\n          aria-controls=\"filter-content\"\r\n          id=\"filter-header\"\r\n        >\r\n          <Typography>Select Criteria</Typography>\r\n        </AppAccordionSummary>\r\n        <AppAccordionDetails\r\n          sx={{ mb: { xs: \"1.3rem\", lg: \"0.5rem\" }, pt: \"1.5rem\" }}\r\n        >\r\n          <Stack\r\n            direction={matchUpLg ? \"row\" : \"column\"}\r\n            alignItems={matchUpLg ? \"start\" : \"center\"}\r\n            justifyContent={matchUpLg ? \"space-between\" : \"center\"}\r\n            spacing={5}\r\n            sx={{ flexWrap: \"wrap\" }}\r\n          >\r\n            <CurrencySelection />\r\n            <TimeRangeSelection />\r\n          </Stack>\r\n        </AppAccordionDetails>\r\n      </AppAccordion>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default React.memo(SelectionCriteriaSection);\r\n","import { Box, Skeleton, Typography } from \"@mui/material\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\nimport {\r\n  getTimeRangeDescriptorFromUrlQuery,\r\n  TIME_RANGE_QUERY_IN_URL,\r\n} from \"../../@types-and-const/@url-queries/@time-range\";\r\nimport { useCurrencyRateQuery } from \"../../api/currency/currencyRatesApi\";\r\nimport useUpdateAppBarTitle from \"../../components/appbar/title-provider/useUpdateAppBarTitle\";\r\nimport { CURRENCY_ROUTE } from \"../../routes/currencyRoute\";\r\nimport BestInvestmentIndicator from \"./components/BestInvestmentIndicator\";\r\nimport CurrencyChart from \"./components/CurrencyChart\";\r\nimport SelectionCriteriaSection from \"./components/SelectionCriteriaSection\";\r\nimport useGetSelectedCurrencyFromUrl from \"./hooks/useGetSelectedCurrencyFromUrl\";\r\n\r\nconst Currency = () => {\r\n  useUpdateAppBarTitle(CURRENCY_ROUTE.text);\r\n\r\n  const [searchParams] = useSearchParams();\r\n\r\n  const selectedCurrency = useGetSelectedCurrencyFromUrl(searchParams);\r\n\r\n  const {\r\n    timeRangeForDataFetching: [startDate, endDate],\r\n  } = getTimeRangeDescriptorFromUrlQuery(\r\n    searchParams.get(TIME_RANGE_QUERY_IN_URL.key)\r\n  );\r\n\r\n  const {\r\n    // data: currencyRates,\r\n    error,\r\n    isLoading,\r\n    isFetching,\r\n    currentData: currencyRates,\r\n  } = useCurrencyRateQuery(\r\n    { selectedCurrency, startDate, endDate },\r\n    {\r\n      refetchOnMountOrArgChange: true,\r\n      refetchOnFocus: true,\r\n      refetchOnReconnect: true,\r\n    }\r\n  );\r\n\r\n  error && console.log(\"error: \", error);\r\n\r\n  // const { data: tableA } = useTableAQuery(undefined, {\r\n  //   refetchOnMountOrArgChange: true,\r\n  // });\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: \"flex\",\r\n        flex: \"auto\",\r\n        // alignItems: \"center\",\r\n        // justifyContent: \"center\",\r\n        flexDirection: \"column\",\r\n        // minHeight: \"100%\",\r\n      }}\r\n    >\r\n      <SelectionCriteriaSection />\r\n      <Box component=\"section\" sx={{ maxWidth: \"100%\", mt: \"1rem\" }}>\r\n        <Typography variant=\"h5\" component=\"h1\">\r\n          {`Actual rate ${selectedCurrency}/PLN: ${\r\n            currencyRates?.rates.at(-1)?.mid ?? \"-\"\r\n          } zł.`}\r\n        </Typography>\r\n      </Box>\r\n      {isFetching && false ? (\r\n        <Skeleton variant=\"rectangular\" width=\"90%\" height={500} />\r\n      ) : (\r\n        // <LoadingIndicator />\r\n        <>\r\n          <CurrencyChart rates={currencyRates?.rates} isFetching={isFetching} />\r\n          <BestInvestmentIndicator\r\n            rates={currencyRates?.rates}\r\n            isFetching={isFetching}\r\n          />\r\n        </>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Currency;\r\n"],"names":["title","setTitleContext","useSetAppBarTitleContext","useEffect","dateToString","date","year","getFullYear","month","getMonth","day","getDate","yearString","String","monthString","length","dayString","getDateRangeFromNowToPast","differenceInDays","endDate","Date","startDate","setDate","isDateValid","Number","isNaN","stringToDate","dateString","dateFragments","match","TIME_RANGE_QUERY_IN_URL","key","allowedValues","TIME_RANGE_QUERY_IN_URL_CONFIG","week","queryValue","valueInDays","uiName","max","DEFAULT_DEFINED_VALUE","DEFAULT_TIME_RANGE_IN_DAYS","getTimeRangeDescriptorFromUrlQuery","timeRangeQueryInUrl","value","selectedDefinedValue","timeRangeForIOFields","datesMatch","getTimeRangeForIOFields","timeRangeForDataFetching","undefined","find","element","rates","isFetching","bestInvestment","useMemo","reduce","previousBestInvestment","buyRate","buyRateIndex","array","maxRateSinceBuyRate","slice","prevMaxRate","rate","mid","maxRefund","refund","refundInPercentage","Math","floor","buyDate","effectiveDate","sellDate","displayedText","Skeleton","Typography","variant","sx","flex","opacity","Box","display","justifyContent","alignItems","minHeight","ResponsiveContainer","width","height","className","cx","styles","animation","AreaChart","data","margin","top","right","left","bottom","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","XAxis","dataKey","YAxis","domain","dataMin","dataMax","stroke","ceil","CartesianGrid","strokeDasharray","Tooltip","Area","type","fillOpacity","fill","name","Legend","AppAccordion","styled","props","Accordion","elevation","square","theme","border","palette","divider","AppAccordionDetails","AccordionDetails","padding","spacing","borderTop","AppAccordionSummary","AccordionSummary","expandIcon","ArrowForwardIosSharp","fontSize","marginLeft","backgroundColor","mode","flexDirection","setQueryInUrl","searchParams","setSearchParams","queryKey","newSearchParamsInstance","URLSearchParams","set","delete","useSearchParams","get","ToggleButtonGroup","exclusive","onChange","_","ToggleButton","control","fieldName","minAllowedDate","shouldReserveSpaceForErrorMessage","validationRules","rules","render","field","fieldState","DatePicker","mask","disableFuture","openTo","views","minDate","inputRef","ref","renderInput","params","TextField","error","Boolean","helperText","message","onBlur","reset","IconButton","onClick","removeQueryFromUrl","HighlightOff","setValue","getValues","dates","shouldValidate","MIN_ALLOWED_DATE","validationSchema","Yup","required","CustomTimeRangeSelection","useTheme","matchDownSm","useMediaQuery","breakpoints","down","useForm","defaultValues","criteriaMode","shouldUnregister","resolver","yupResolver","handleSubmit","watch","errors","formState","useUpdateTimeRangeBasedOnUrl","onSubmit","values","noValidate","Stack","direction","flexWrap","Button","size","disabled","Object","keys","React","TimeRangeSelection","matchDownXl","matchOnlyLg","only","up","pt","flexGrow","valueFromUrlQuery","substituteValue","validationFunction","typeGuardValue","getValueFromUrlQueryTypeGuard","SELECTED_CURRENCY_QUERY_IN_URL_KEY_NAME","DEFAULT_SELECTED_CURRENCY","isValidSelectedCurrencyQueryInUrl","CurrencySelection","selectedCurrency","useGetSelectedCurrencyFromUrl","FormControl","m","minWidth","InputLabel","Select","labelId","e","target","label","autoWidth","MenuItem","USD_CURRENCY","EUR_CURRENCY","SelectionCriteriaSection","useState","isAccordionExpanded","SetIsAccordionExpanded","matchUpLg","component","expanded","prev","mb","ExpandMore","xs","lg","useUpdateAppBarTitle","CURRENCY_ROUTE","useCurrencyRateQuery","refetchOnMountOrArgChange","refetchOnFocus","refetchOnReconnect","isLoading","currencyRates","currentData","console","log","maxWidth","mt","at"],"sourceRoot":""}