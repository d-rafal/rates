{"version":3,"file":"static/js/526.65794c32.chunk.js","mappings":"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","sources":["components/appbar/title-provider/useUpdateAppBarTitle.tsx","utilities/date/dateToString.ts","utilities/date/getDateRangeFromNowToPast.ts","utilities/date/isDateValid.ts","utilities/date/stringToDate.ts","@types-and-const/@url-queries/@time-range.ts","pages/currency/components/BestInvestmentIndicator.tsx","webpack://rates/./src/pages/currency/components/CurrencyChart.module.scss?b23b","pages/currency/components/CurrencyChart.tsx","mui/app-accordion/AppAccordion.tsx","mui/app-accordion/AppAccordionDetails.tsx","mui/app-accordion/AppAccordionSummary.tsx","mui/form-elements/DatePickerField.tsx","utilities/setQueryInURL.ts","pages/currency/hooks/useUpdateTimeRangeBasedOnUrl.tsx","pages/currency/components/ClearTimeRangeSelection.tsx","utilities/removeQueryFromUrl.ts","pages/currency/components/CustomTimeRangeSelection.tsx","pages/currency/components/DefaultTimeRangePicker.tsx","pages/currency/components/TimeRangeSelection.tsx","pages/currency/hooks/useGetSelectedCurrencyFromUrl.tsx","utilities/getValueFromUrlQueryTypeGuard.ts","pages/currency/components/CurrencySelection.tsx","pages/currency/components/SelectionCriteriaSection.tsx","pages/currency/Currency.tsx"],"sourcesContent":["import { useEffect } from \"react\";\nimport { useSetAppBarTitleContext } from \"./AppBarTitleProvider\";\n\nconst useUpdateAppBarTitle = (title: string) => {\n  const setTitleContext = useSetAppBarTitleContext();\n\n  useEffect(() => {\n    setTitleContext(title);\n  }, [setTitleContext, title]);\n\n  return null;\n};\n\nexport default useUpdateAppBarTitle;\n","export const dateToString = (date: Date) => {\n  let year = date.getFullYear();\n  let month = date.getMonth() + 1;\n  let day = date.getDate();\n\n  const yearString = String(year);\n\n  let monthString = String(month);\n\n  if (monthString.length < 2) {\n    monthString = \"0\" + monthString;\n  }\n\n  let dayString = String(day);\n\n  if (dayString.length < 2) {\n    dayString = \"0\" + dayString;\n  }\n\n  return `${yearString}-${monthString}-${dayString}`;\n};\n","export const getDateRangeFromNowToPast = (differenceInDays: number) => {\n  const endDate = new Date();\n  const startDate = new Date(endDate);\n  startDate.setDate(startDate.getDate() - differenceInDays);\n\n  return [startDate, endDate] as const;\n};\n","export const isDateValid = (date: Date) =>\n  date instanceof Date && !Number.isNaN(Number(date));\n","export const stringToDate = (dateString: string) => {\n  const dateFragments = dateString.match(/(\\d{4})-(\\d{2})-(\\d{2})/);\n\n  return new Date(\n    Number(dateFragments?.[1]),\n    Number(dateFragments?.[2]) - 1,\n    Number(dateFragments?.[3])\n  );\n};\n","import { dateToString } from \"../../utilities/date/dateToString\";\r\nimport { getDateRangeFromNowToPast } from \"../../utilities/date/getDateRangeFromNowToPast\";\r\nimport { isDateValid } from \"../../utilities/date/isDateValid\";\r\nimport { stringToDate } from \"../../utilities/date/stringToDate\";\r\n\r\nexport const TIME_RANGE_QUERY_IN_URL = {\r\n  key: \"time-range\" as const,\r\n  allowedValues: [\"week\", \"month\", \"3months\", \"6months\", \"max\"] as const,\r\n};\r\n\r\nexport type TimeRangeQueryInUrlKayName = typeof TIME_RANGE_QUERY_IN_URL[\"key\"];\r\n\r\nexport type TimeRangeQueryInUrlAllowedDefinedValues =\r\n  typeof TIME_RANGE_QUERY_IN_URL[\"allowedValues\"][number];\r\n\r\ntype TimeRangeQueryInUrlConfig<Union extends string> = {\r\n  readonly [Property in Union]: {\r\n    readonly queryValue: Property;\r\n    readonly valueInDays: number;\r\n    readonly uiName: string;\r\n  };\r\n};\r\n\r\nexport const TIME_RANGE_QUERY_IN_URL_CONFIG: TimeRangeQueryInUrlConfig<TimeRangeQueryInUrlAllowedDefinedValues> =\r\n  {\r\n    week: { queryValue: \"week\", valueInDays: 7, uiName: \"week\" },\r\n    month: { queryValue: \"month\", valueInDays: 31, uiName: \"month\" },\r\n    \"3months\": { queryValue: \"3months\", valueInDays: 93, uiName: \"3 months\" },\r\n    \"6months\": { queryValue: \"6months\", valueInDays: 186, uiName: \"6 months\" },\r\n    max: { queryValue: \"max\", valueInDays: 367, uiName: \"max\" },\r\n  };\r\n\r\nexport const DEFAULT_DEFINED_VALUE: TimeRangeQueryInUrlAllowedDefinedValues =\r\n  \"month\";\r\nexport const DEFAULT_TIME_RANGE_IN_DAYS =\r\n  TIME_RANGE_QUERY_IN_URL_CONFIG[DEFAULT_DEFINED_VALUE].valueInDays;\r\nexport const MAX_TIME_RANGE_IN_DAYS =\r\n  TIME_RANGE_QUERY_IN_URL_CONFIG[\"max\"].valueInDays;\r\n\r\nexport const isValidTimeRangeQueryInUrlAllowedDefinedValues = (\r\n  value: string | null | undefined\r\n): value is TimeRangeQueryInUrlAllowedDefinedValues => {\r\n  return (\r\n    TIME_RANGE_QUERY_IN_URL.allowedValues.find(\r\n      (element) => element === value\r\n    ) !== undefined\r\n  );\r\n};\r\n\r\nexport interface TimeRangeDescriptor {\r\n  readonly selectedDefinedValue: TimeRangeQueryInUrlAllowedDefinedValues | null;\r\n  readonly timeRangeForDataFetching: readonly [string, string];\r\n  readonly timeRangeForIOFields: readonly [Date, Date] | null;\r\n}\r\n\r\nconst getTimeRangeForIOFields = (\r\n  timeRangeQueryInUrl: string | null\r\n): TimeRangeDescriptor[\"timeRangeForIOFields\"] => {\r\n  const datesMatch = timeRangeQueryInUrl?.match(\r\n    /from-(\\d{4}-\\d{2}-\\d{2})-to-(\\d{4}-\\d{2}-\\d{2})/\r\n  );\r\n\r\n  if (datesMatch) {\r\n    const startDate = stringToDate(datesMatch[1]);\r\n    const endDate = stringToDate(datesMatch[2]);\r\n\r\n    if (isDateValid(startDate) && isDateValid(endDate)) {\r\n      return [startDate, endDate] as const;\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\nexport const getTimeRangeDescriptorFromUrlQuery = (\r\n  timeRangeQueryInUrl: string | null\r\n): TimeRangeDescriptor => {\r\n  const timeRangeForIOFields: TimeRangeDescriptor[\"timeRangeForIOFields\"] =\r\n    getTimeRangeForIOFields(timeRangeQueryInUrl);\r\n\r\n  let timeRangeForDataFetching: readonly [Date, Date] =\r\n    timeRangeForIOFields ??\r\n    getDateRangeFromNowToPast(DEFAULT_TIME_RANGE_IN_DAYS);\r\n\r\n  let selectedDefinedValue: TimeRangeDescriptor[\"selectedDefinedValue\"] = null;\r\n\r\n  if (!timeRangeQueryInUrl) {\r\n    selectedDefinedValue = DEFAULT_DEFINED_VALUE;\r\n  } else if (\r\n    isValidTimeRangeQueryInUrlAllowedDefinedValues(timeRangeQueryInUrl)\r\n  ) {\r\n    selectedDefinedValue = timeRangeQueryInUrl;\r\n\r\n    if (timeRangeQueryInUrl !== DEFAULT_DEFINED_VALUE) {\r\n      timeRangeForDataFetching = getDateRangeFromNowToPast(\r\n        TIME_RANGE_QUERY_IN_URL_CONFIG[timeRangeQueryInUrl].valueInDays\r\n      );\r\n    }\r\n  }\r\n\r\n  return {\r\n    selectedDefinedValue,\r\n    timeRangeForDataFetching: [\r\n      dateToString(timeRangeForDataFetching[0]),\r\n      dateToString(timeRangeForDataFetching[1]),\r\n    ] as const,\r\n    timeRangeForIOFields,\r\n  };\r\n};\r\n","import { Box, Skeleton, Typography, useTheme } from \"@mui/material\";\r\nimport { useMemo } from \"react\";\r\nimport { CurrencyRate } from \"../../../api/currency/models\";\r\n\r\ninterface BestInvestmentIndicatorProps {\r\n  rates: CurrencyRate[\"rates\"] | undefined;\r\n  isFetching: boolean;\r\n}\r\n\r\ninterface BestInvestment {\r\n  refund: number;\r\n  refundInPercentage: number;\r\n  buyDate: string | null;\r\n  sellDate: string | null;\r\n}\r\n\r\nconst BestInvestmentIndicator = ({\r\n  rates,\r\n  isFetching,\r\n}: BestInvestmentIndicatorProps) => {\r\n  const theme = useTheme();\r\n\r\n  const bestInvestment = useMemo(() => {\r\n    return rates?.reduce<BestInvestment | null>(\r\n      (previousBestInvestment, buyRate, buyRateIndex, array) => {\r\n        const ratesSinceBuyRate = array.slice(buyRateIndex);\r\n\r\n        const maxRateSinceBuyRate = ratesSinceBuyRate.reduce(\r\n          (prevMaxRate, rate) => {\r\n            if (prevMaxRate.mid < rate.mid) {\r\n              return rate;\r\n            }\r\n\r\n            return prevMaxRate;\r\n          }\r\n        );\r\n\r\n        const maxRefund = maxRateSinceBuyRate.mid - buyRate.mid;\r\n\r\n        if (\r\n          !previousBestInvestment ||\r\n          maxRefund > previousBestInvestment.refund\r\n        ) {\r\n          return {\r\n            refund: maxRefund,\r\n            refundInPercentage: Math.floor((maxRefund / buyRate.mid) * 100),\r\n            buyDate: buyRate.effectiveDate,\r\n            sellDate: maxRateSinceBuyRate.effectiveDate,\r\n          };\r\n        }\r\n\r\n        return previousBestInvestment;\r\n      },\r\n      null\r\n    );\r\n  }, [rates]);\r\n\r\n  if (isFetching) {\r\n    return <Skeleton />;\r\n  }\r\n\r\n  const displayedText = bestInvestment ? (\r\n    <>\r\n      <Typography\r\n        variant=\"h5\"\r\n        sx={{ minWidth: \"max-content\" }}\r\n      >{`Best investment: ${Math.floor(bestInvestment.refund * 100) / 100}zł./${\r\n        bestInvestment.refundInPercentage\r\n      }%`}</Typography>\r\n      <Typography\r\n        variant=\"h5\"\r\n        sx={{ minWidth: \"max-content\" }}\r\n      >{`(sell at: ${bestInvestment.sellDate})`}</Typography>\r\n      <Typography\r\n        variant=\"h5\"\r\n        sx={{ minWidth: \"max-content\" }}\r\n      >{`(buy at: ${bestInvestment.buyDate})`}</Typography>\r\n    </>\r\n  ) : (\r\n    <Typography>no date to calculate result</Typography>\r\n  );\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        flex: \"auto\",\r\n        [theme.breakpoints.down(\"lg\")]: { flexDirection: \"column\" },\r\n        opacity: isFetching ? 0.5 : 1,\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        gap: \"0.3rem\",\r\n      }}\r\n    >\r\n      {displayedText}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default BestInvestmentIndicator;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"reFetching\":\"CurrencyChart_reFetching__uZmkN\"};","import {\r\n  Area,\r\n  AreaChart,\r\n  CartesianGrid,\r\n  Legend,\r\n  ResponsiveContainer,\r\n  Tooltip,\r\n  XAxis,\r\n  YAxis,\r\n} from \"recharts\";\r\nimport { CurrencyRate } from \"../../../api/currency/models\";\r\nimport styles from \"./CurrencyChart.module.scss\";\r\nimport { Box, Skeleton, useTheme } from \"@mui/material\";\r\nimport cx from \"classnames\";\r\n\r\ninterface CurrencyChartProps {\r\n  rates: CurrencyRate[\"rates\"] | undefined;\r\n  isFetching: boolean;\r\n}\r\n\r\nconst CurrencyChart = ({ rates, isFetching }: CurrencyChartProps) => {\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        minHeight: \"500px\",\r\n        flex: \"auto\",\r\n        mb: \"1rem\",\r\n      }}\r\n    >\r\n      <ResponsiveContainer\r\n        width=\"96%\"\r\n        height={550}\r\n        className={cx({ [styles.reFetching]: isFetching })}\r\n      >\r\n        {isFetching && !rates ? (\r\n          <Skeleton\r\n            variant=\"rectangular\"\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n            animation=\"wave\"\r\n          />\r\n        ) : (\r\n          <AreaChart\r\n            width={730}\r\n            height={250}\r\n            data={rates}\r\n            margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\r\n          >\r\n            <defs>\r\n              <linearGradient id=\"colorPv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\r\n                <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\r\n              </linearGradient>\r\n            </defs>\r\n            <XAxis dataKey=\"effectiveDate\" />\r\n            <YAxis\r\n              domain={([dataMin, dataMax]: [number, number]) => {\r\n                const stroke = dataMax - dataMin;\r\n\r\n                return [\r\n                  Math.floor((dataMin - 0.1 * stroke) * 100) / 100,\r\n                  Math.ceil((dataMax + 0.1 * stroke) * 100) / 100,\r\n                ];\r\n              }}\r\n            />\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <Tooltip\r\n              labelStyle={{ color: theme.palette.text.primary }}\r\n              contentStyle={{\r\n                backgroundColor: theme.palette.background.default,\r\n              }}\r\n            />\r\n            <Area\r\n              type=\"monotone\"\r\n              dataKey=\"mid\"\r\n              stroke=\"#82ca9d\"\r\n              fillOpacity={1}\r\n              fill=\"url(#colorPv)\"\r\n              name=\"rate\"\r\n              // legendType=\"diamond\"\r\n              // label\r\n            />\r\n            {/* <Legend content={renderLegend} /> */}\r\n            <Legend />\r\n          </AreaChart>\r\n        )}\r\n      </ResponsiveContainer>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CurrencyChart;\r\n","import { styled } from \"@mui/material/styles\";\nimport { Accordion, AccordionProps } from \"@mui/material\";\n\nexport const AppAccordion = styled((props: AccordionProps) => (\n  <Accordion elevation={2} square {...props} />\n))(({ theme }) => ({\n  border: `1px solid ${theme.palette.divider}`,\n  \"&:not(:last-child)\": {},\n  \"&:before\": {\n    display: \"none\",\n  },\n}));\n","import { styled } from \"@mui/material/styles\";\nimport { AccordionDetails } from \"@mui/material\";\n\nexport const AppAccordionDetails = styled(AccordionDetails)(({ theme }) => ({\n  padding: theme.spacing(2),\n  borderTop: \"1px solid rgba(0, 0, 0, .125)\",\n}));\n","import { styled } from \"@mui/material/styles\";\nimport ArrowForwardIosSharpIcon from \"@mui/icons-material/ArrowForwardIosSharp\";\nimport { AccordionSummary, AccordionSummaryProps } from \"@mui/material\";\n\nexport const AppAccordionSummary = styled((props: AccordionSummaryProps) => (\n  <AccordionSummary\n    expandIcon={<ArrowForwardIosSharpIcon sx={{ fontSize: \"0.9rem\" }} />}\n    sx={{\n      \"& .MuiAccordionSummary-content\": { marginLeft: \"0.5rem!important\" },\n      // \"&.Mui-expanded\": { marginLeft: \"0.5rem\" },\n    }}\n    {...props}\n  />\n))(({ theme }) => ({\n  backgroundColor:\n    theme.palette.mode === \"dark\"\n      ? \"rgba(255, 255, 255, .05)\"\n      : \"rgba(0, 0, 0, .03)\",\n  flexDirection: \"row-reverse\",\n}));\n","import { TextField } from \"@mui/material\";\nimport { DatePicker } from \"@mui/x-date-pickers\";\nimport React from \"react\";\n\nimport {\n  Controller,\n  FieldValues,\n  Control,\n  Path,\n  UseControllerProps,\n} from \"react-hook-form\";\n\ninterface DatePickerFieldProps<T extends FieldValues> {\n  control: Control<T>;\n  fieldName: Path<T>;\n  minAllowedDate: Date;\n  shouldReserveSpaceForErrorMessage?: boolean;\n  validationRules?: UseControllerProps<T, Path<T>>[\"rules\"];\n}\n\nconst DatePickerField = <T extends FieldValues>({\n  control,\n  fieldName,\n  minAllowedDate,\n  shouldReserveSpaceForErrorMessage = true,\n  validationRules,\n}: DatePickerFieldProps<T>) => {\n  return (\n    <Controller\n      name={fieldName}\n      control={control}\n      rules={validationRules}\n      render={({ field, fieldState }) => (\n        <DatePicker\n          mask={\"__.__.____\"}\n          disableFuture\n          openTo=\"month\"\n          views={[\"year\", \"month\", \"day\"]}\n          minDate={minAllowedDate}\n          value={field.value}\n          onChange={field.onChange}\n          inputRef={field.ref}\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              name={field.name}\n              variant=\"standard\"\n              error={Boolean(fieldState.error)}\n              helperText={\n                fieldState.error\n                  ? fieldState.error?.message\n                  : shouldReserveSpaceForErrorMessage\n                  ? \" \"\n                  : \"\"\n              }\n              onBlur={field.onBlur}\n            />\n          )}\n        />\n      )}\n    />\n  );\n};\n\nexport default DatePickerField;\n","import { SetSearchParams } from \"../@types-and-const/@general\";\n\n/**\n * This function updates url query using passed setSearchParams method returned by useSearchParams hook from react-router, if last argument (queryValue)\n is equal to empty string, the query will be deleted from url.\n *\n * @param searchParams - URLSearchParams instance\n * @param setSearchParams - method returned by useSearchParams hook from react-router\n * @param queryKey - query key\n * @param queryValue - query value, if empty string, the query will be deleted from url\n * @returns void\n */\nexport const setQueryInUrl = <T extends string, K extends string>(\n  searchParams: URLSearchParams,\n  setSearchParams: SetSearchParams,\n  queryKey: T,\n  queryValue: K\n) => {\n  const newSearchParamsInstance = new URLSearchParams(searchParams);\n\n  if (!queryValue) {\n    newSearchParamsInstance.delete(queryKey);\n  } else {\n    newSearchParamsInstance.set(queryKey, queryValue);\n  }\n\n  setSearchParams(newSearchParamsInstance);\n};\n","import { useEffect } from \"react\";\nimport { UseFormSetValue, UseFormGetValues } from \"react-hook-form\";\nimport { getTimeRangeDescriptorFromUrlQuery } from \"../../../@types-and-const/@url-queries/@time-range\";\nimport { type FormDataType } from \"../components/CustomTimeRangeSelection\";\n\nconst useUpdateTimeRangeBasedOnUrl = (\n  timeRangeQueryInUrl: string | null,\n  setValue: UseFormSetValue<FormDataType>,\n  getValues: UseFormGetValues<FormDataType>\n) => {\n  useEffect(() => {\n    const { timeRangeForIOFields: dates } =\n      getTimeRangeDescriptorFromUrlQuery(timeRangeQueryInUrl);\n\n    if (dates) {\n      const startDate = dates[0];\n      const endDate = dates[1];\n\n      if (startDate !== getValues(\"start-date\")) {\n        setValue(\"start-date\", startDate, { shouldValidate: true });\n      }\n\n      if (endDate !== getValues(\"end-date\")) {\n        setValue(\"end-date\", endDate, { shouldValidate: true });\n      }\n    }\n  }, [timeRangeQueryInUrl, setValue, getValues]);\n};\n\nexport default useUpdateTimeRangeBasedOnUrl;\n","import { IconButton } from \"@mui/material\";\nimport HighlightOffIcon from \"@mui/icons-material/HighlightOff\";\nimport { UseFormReset } from \"react-hook-form\";\n\nimport { SetSearchParams } from \"../../../@types-and-const/@general\";\n\nimport { removeQueryFromUrl } from \"../../../utilities/removeQueryFromUrl\";\nimport { TIME_RANGE_QUERY_IN_URL } from \"../../../@types-and-const/@url-queries/@time-range\";\nimport { type FormDataType } from \"./CustomTimeRangeSelection\";\n\ninterface ClearTimeRangeSelectionProps {\n  searchParams: URLSearchParams;\n  setSearchParams: SetSearchParams;\n  reset: UseFormReset<FormDataType>;\n}\n\nconst ClearTimeRangeSelection = ({\n  searchParams,\n  setSearchParams,\n  reset,\n}: ClearTimeRangeSelectionProps) => {\n  return (\n    <IconButton\n      type=\"button\"\n      aria-label=\"clear filter\"\n      onClick={() => {\n        reset();\n        removeQueryFromUrl(\n          searchParams,\n          setSearchParams,\n          TIME_RANGE_QUERY_IN_URL.key\n        );\n      }}\n    >\n      <HighlightOffIcon sx={{ fontSize: \"3rem\" }} />\n    </IconButton>\n  );\n};\n\nexport default ClearTimeRangeSelection;\n","import { SetSearchParams } from \"../@types-and-const/@general\";\n\n/**\n * This function removes url query using passed setSearchParams method returned by useSearchParams hook from react-router.\n *\n * @param searchParams - URLSearchParams instance\n * @param setSearchParams - method returned by useSearchParams hook from react-router\n * @param queryKey - query key\n * @returns void\n */\nexport const removeQueryFromUrl = <T extends string>(\n  searchParams: URLSearchParams,\n  setSearchParams: SetSearchParams,\n  queryKey: T\n) => {\n  const newSearchParamsInstance = new URLSearchParams(searchParams);\n  newSearchParamsInstance.delete(queryKey);\n\n  setSearchParams(newSearchParamsInstance);\n};\n","import { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { Box, Button, Stack, useMediaQuery, useTheme } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport { SubmitHandler, useForm } from \"react-hook-form\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\nimport * as Yup from \"yup\";\r\nimport { ObjectShape } from \"yup/lib/object\";\r\nimport { OrNull } from \"../../../@types-and-const/@general\";\r\nimport {\r\n  getTimeRangeDescriptorFromUrlQuery,\r\n  TIME_RANGE_QUERY_IN_URL,\r\n} from \"../../../@types-and-const/@url-queries/@time-range\";\r\nimport DatePickerField from \"../../../mui/form-elements/DatePickerField\";\r\nimport { dateToString } from \"../../../utilities/date/dateToString\";\r\nimport { setQueryInUrl } from \"../../../utilities/setQueryInURL\";\r\nimport useUpdateTimeRangeBasedOnUrl from \"../hooks/useUpdateTimeRangeBasedOnUrl\";\r\nimport ClearTimeRangeSelection from \"./ClearTimeRangeSelection\";\r\n\r\nexport const MIN_ALLOWED_DATE = new Date(2014, 0, 1, 0, 0, 0);\r\nexport interface FormDataType {\r\n  \"start-date\": OrNull<Date>;\r\n  \"end-date\": OrNull<Date>;\r\n}\r\n\r\ntype FormDataTypeForYup = {\r\n  [Property in keyof FormDataType]+?: ObjectShape[string];\r\n};\r\n\r\nconst validationSchema = Yup.object<FormDataTypeForYup>({\r\n  \"start-date\": Yup.date().typeError(\"Invalid date\").required(\"Required\"),\r\n  \"end-date\": Yup.date().typeError(\"Invalid date\").required(\"Required\"),\r\n}).required();\r\n\r\n// export const commonDateValidation = {\r\n//   validDate: (date: FormDataType[\"start-date\"]) =>\r\n//     (!!date && isDateValid(date)) || \"Enter valid date\",\r\n//   notFutureDate: (date: FormDataType[\"start-date\"]) =>\r\n//     (!!date && date < new Date()) || \"Future date not allowed\",\r\n//   notBeforeMinAllowedDate: (date: FormDataType[\"start-date\"]) =>\r\n//     (!!date && date > MIN_ALLOWED_DATE) ||\r\n//     `Date before ${\r\n//       MIN_ALLOWED_DATE.toLocaleString(\"pl-PL\", { timeZone: \"UTC\" }).split(\r\n//         \",\"\r\n//       )[0]\r\n//     }`,\r\n// };\r\n\r\nconst CustomTimeRangeSelection = () => {\r\n  const theme = useTheme();\r\n  const matchDownSm = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n  const matchDownMd = useMediaQuery(theme.breakpoints.down(\"md\"));\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n\r\n  const {\r\n    handleSubmit,\r\n    reset,\r\n    setValue,\r\n    getValues,\r\n    control,\r\n    watch,\r\n    formState: { errors },\r\n  } = useForm<FormDataType>({\r\n    defaultValues: {\r\n      \"start-date\": null,\r\n      \"end-date\": null,\r\n    },\r\n    mode: \"all\",\r\n    criteriaMode: \"firstError\",\r\n    shouldUnregister: true,\r\n    resolver: yupResolver(validationSchema),\r\n  });\r\n\r\n  const timeRangeQueryInUrl = searchParams.get(TIME_RANGE_QUERY_IN_URL.key);\r\n\r\n  useUpdateTimeRangeBasedOnUrl(timeRangeQueryInUrl, setValue, getValues);\r\n\r\n  const { timeRangeForIOFields: dates } =\r\n    getTimeRangeDescriptorFromUrlQuery(timeRangeQueryInUrl);\r\n\r\n  const startDate = watch(\"start-date\");\r\n\r\n  const onSubmit: SubmitHandler<FormDataType> = async (values) => {\r\n    const startDate = values[\"start-date\"];\r\n    const endDate = values[\"end-date\"];\r\n\r\n    setQueryInUrl(\r\n      searchParams,\r\n      setSearchParams,\r\n      TIME_RANGE_QUERY_IN_URL.key,\r\n      \"from-\" + dateToString(startDate!) + \"-to-\" + dateToString(endDate!)\r\n    );\r\n  };\r\n\r\n  return (\r\n    <form noValidate onSubmit={handleSubmit(onSubmit)}>\r\n      <Stack\r\n        spacing={matchDownSm ? 2 : 3}\r\n        direction={matchDownMd ? \"column\" : \"row\"}\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n        sx={{ flexWrap: \"wrap\" }}\r\n      >\r\n        <DatePickerField\r\n          fieldName=\"start-date\"\r\n          control={control}\r\n          // validationRules={{\r\n          //   validate: {\r\n          //     ...commonDateValidation,\r\n          //   },\r\n          // }}\r\n          minAllowedDate={MIN_ALLOWED_DATE}\r\n          shouldReserveSpaceForErrorMessage={false}\r\n        />\r\n        <DatePickerField\r\n          fieldName=\"end-date\"\r\n          control={control}\r\n          // validationRules={{\r\n          //   validate: {\r\n          //     ...commonDateValidation,\r\n          //     afterStartDate: (date) => {\r\n          //       const startDate = getValues(\"start-date\");\r\n          //       console.log(\"startDate =\", startDate);\r\n          //       return (\r\n          //         (date !== null && startDate !== null && date > startDate) ||\r\n          //         \"End date after start date\"\r\n          //       );\r\n          //     },\r\n          //   },\r\n          // }}\r\n          minAllowedDate={startDate ? startDate : MIN_ALLOWED_DATE}\r\n          shouldReserveSpaceForErrorMessage={false}\r\n        />\r\n        <Box>\r\n          <Button\r\n            type=\"submit\"\r\n            size=\"large\"\r\n            variant=\"outlined\"\r\n            disabled={Boolean(Object.keys(errors).length)}\r\n          >\r\n            Select time range\r\n          </Button>\r\n          {dates !== null ? (\r\n            <ClearTimeRangeSelection\r\n              searchParams={searchParams}\r\n              setSearchParams={setSearchParams}\r\n              reset={reset}\r\n            />\r\n          ) : null}\r\n        </Box>\r\n      </Stack>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default React.memo(CustomTimeRangeSelection);\r\n","import { ToggleButton, ToggleButtonGroup } from \"@mui/material\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\nimport {\r\n  getTimeRangeDescriptorFromUrlQuery,\r\n  TimeRangeQueryInUrlAllowedDefinedValues,\r\n  TIME_RANGE_QUERY_IN_URL,\r\n  TIME_RANGE_QUERY_IN_URL_CONFIG,\r\n} from \"../../../@types-and-const/@url-queries/@time-range\";\r\n\r\nimport { setQueryInUrl } from \"../../../utilities/setQueryInURL\";\r\n\r\nconst DefaultTimeRangePicker = () => {\r\n  const theme = useTheme();\r\n  const matchDownSm = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n\r\n  const timeRangeQueryInUrl = searchParams.get(TIME_RANGE_QUERY_IN_URL.key);\r\n\r\n  const { selectedDefinedValue } =\r\n    getTimeRangeDescriptorFromUrlQuery(timeRangeQueryInUrl);\r\n\r\n  const onChange = (\r\n    _: React.MouseEvent<HTMLElement, MouseEvent>,\r\n    value: TimeRangeQueryInUrlAllowedDefinedValues\r\n  ) => {\r\n    setQueryInUrl(\r\n      searchParams,\r\n      setSearchParams,\r\n      TIME_RANGE_QUERY_IN_URL.key,\r\n      value\r\n    );\r\n  };\r\n\r\n  return (\r\n    <ToggleButtonGroup\r\n      value={selectedDefinedValue}\r\n      exclusive\r\n      onChange={onChange}\r\n      aria-label=\"text alignment\"\r\n      size={matchDownSm ? \"small\" : \"medium\"}\r\n    >\r\n      <ToggleButton\r\n        value={TIME_RANGE_QUERY_IN_URL_CONFIG.week.queryValue}\r\n        aria-label=\"centered\"\r\n      >\r\n        {TIME_RANGE_QUERY_IN_URL_CONFIG.week.uiName}\r\n      </ToggleButton>\r\n      <ToggleButton\r\n        value={TIME_RANGE_QUERY_IN_URL_CONFIG.month.queryValue}\r\n        aria-label=\"centered\"\r\n      >\r\n        {TIME_RANGE_QUERY_IN_URL_CONFIG.month.uiName}\r\n      </ToggleButton>\r\n      <ToggleButton\r\n        value={TIME_RANGE_QUERY_IN_URL_CONFIG[\"3months\"].queryValue}\r\n        aria-label=\"centered\"\r\n      >\r\n        {TIME_RANGE_QUERY_IN_URL_CONFIG[\"3months\"].uiName}\r\n      </ToggleButton>\r\n      <ToggleButton\r\n        value={TIME_RANGE_QUERY_IN_URL_CONFIG[\"6months\"].queryValue}\r\n        aria-label=\"centered\"\r\n      >\r\n        {TIME_RANGE_QUERY_IN_URL_CONFIG[\"6months\"].uiName}\r\n      </ToggleButton>\r\n      <ToggleButton\r\n        value={TIME_RANGE_QUERY_IN_URL_CONFIG.max.queryValue}\r\n        aria-label=\"centered\"\r\n      >\r\n        {TIME_RANGE_QUERY_IN_URL_CONFIG.max.uiName}\r\n      </ToggleButton>\r\n    </ToggleButtonGroup>\r\n  );\r\n};\r\n\r\nexport default DefaultTimeRangePicker;\r\n","import { Box, Stack, useMediaQuery, useTheme } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport CustomTimeRangeSelection from \"./CustomTimeRangeSelection\";\r\nimport DefaultTimeRangePicker from \"./DefaultTimeRangePicker\";\r\n\r\nconst TimeRangeSelection = () => {\r\n  const theme = useTheme();\r\n  const matchDownSm = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n  const matchDownXl = useMediaQuery(theme.breakpoints.down(\"xl\"));\r\n  const matchOnlyLg = useMediaQuery(theme.breakpoints.only(\"lg\"));\r\n\r\n  return (\r\n    <Box sx={{ pt: \"0.0rem\", flexGrow: 0 }}>\r\n      <Stack\r\n        spacing={matchDownSm ? 4 : 4}\r\n        direction={matchDownXl ? \"column\" : \"row\"}\r\n        alignItems={matchOnlyLg ? \"end\" : \"center\"}\r\n        justifyContent=\"center\"\r\n        sx={{ flexWrap: \"wrap\" }}\r\n      >\r\n        <DefaultTimeRangePicker />\r\n        <CustomTimeRangeSelection />\r\n      </Stack>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default React.memo(TimeRangeSelection);\r\n","import {\n  DEFAULT_SELECTED_CURRENCY,\n  isValidSelectedCurrencyQueryInUrl,\n  SELECTED_CURRENCY_QUERY_IN_URL_KEY_NAME,\n} from \"../../../@types-and-const/@url-queries/@currency\";\nimport { getValueFromUrlQueryTypeGuard } from \"../../../utilities/getValueFromUrlQueryTypeGuard\";\n\nconst useGetSelectedCurrencyFromUrl = (searchParams: URLSearchParams) => {\n  const selectedCurrency = getValueFromUrlQueryTypeGuard(\n    searchParams.get(SELECTED_CURRENCY_QUERY_IN_URL_KEY_NAME),\n    DEFAULT_SELECTED_CURRENCY,\n    isValidSelectedCurrencyQueryInUrl\n  );\n\n  return selectedCurrency;\n};\n\nexport default useGetSelectedCurrencyFromUrl;\n","export const getValueFromUrlQueryTypeGuard = <T extends E, K extends T, E>(\n  valueFromUrlQuery: E,\n  substituteValue: K,\n  validationFunction: (value: E) => value is T\n) => {\n  let typeGuardValue: T | K = substituteValue;\n\n  if (validationFunction(valueFromUrlQuery)) {\n    typeGuardValue = valueFromUrlQuery;\n  }\n\n  return typeGuardValue;\n};\n","import {\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  SelectChangeEvent,\n} from \"@mui/material\";\nimport { useSearchParams } from \"react-router-dom\";\nimport {\n  EUR_CURRENCY,\n  SELECTED_CURRENCY_QUERY_IN_URL_KEY_NAME,\n  USD_CURRENCY,\n} from \"../../../@types-and-const/@url-queries/@currency\";\nimport { setQueryInUrl } from \"../../../utilities/setQueryInURL\";\n\nimport React from \"react\";\nimport useGetSelectedCurrencyFromUrl from \"../hooks/useGetSelectedCurrencyFromUrl\";\n\nconst CurrencySelection = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const selectedCurrency = useGetSelectedCurrencyFromUrl(searchParams);\n\n  const setSelectedCurrencyQueryInURL = (e: SelectChangeEvent<any>) => {\n    setQueryInUrl(\n      searchParams,\n      setSearchParams,\n      SELECTED_CURRENCY_QUERY_IN_URL_KEY_NAME,\n      e.target.value\n    );\n  };\n\n  return (\n    <FormControl variant=\"standard\" sx={{ m: 0, minWidth: \"6rem\" }}>\n      <InputLabel id=\"select-currency-label\">Select currency</InputLabel>\n      <Select\n        labelId=\"select-currency-label\"\n        id=\"select-currency\"\n        value={selectedCurrency}\n        onChange={setSelectedCurrencyQueryInURL}\n        label=\"Select currency\"\n        autoWidth\n      >\n        <MenuItem value={USD_CURRENCY}>{USD_CURRENCY}</MenuItem>\n        <MenuItem value={EUR_CURRENCY}>{EUR_CURRENCY}</MenuItem>\n      </Select>\n    </FormControl>\n  );\n};\n\nexport default React.memo(CurrencySelection);\n","import { Box, Stack, Typography, useMediaQuery, useTheme } from \"@mui/material\";\r\nimport { AppAccordion } from \"../../../mui/app-accordion/AppAccordion\";\r\nimport { AppAccordionDetails } from \"../../../mui/app-accordion/AppAccordionDetails\";\r\nimport { AppAccordionSummary } from \"../../../mui/app-accordion/AppAccordionSummary\";\r\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\r\nimport React, { useState } from \"react\";\r\nimport TimeRangeSelection from \"./TimeRangeSelection\";\r\nimport CurrencySelection from \"./CurrencySelection\";\r\n\r\nconst SelectionCriteriaSection = () => {\r\n  const [isAccordionExpanded, SetIsAccordionExpanded] = useState(true);\r\n\r\n  const theme = useTheme();\r\n  const matchUpLg = useMediaQuery(theme.breakpoints.up(\"lg\"));\r\n\r\n  return (\r\n    <Box component=\"section\">\r\n      <AppAccordion\r\n        expanded={isAccordionExpanded}\r\n        onChange={() => SetIsAccordionExpanded((prev) => !prev)}\r\n        sx={{ mb: \"2rem!Important\" }}\r\n      >\r\n        <AppAccordionSummary\r\n          expandIcon={<ExpandMoreIcon />}\r\n          aria-controls=\"filter-content\"\r\n          id=\"filter-header\"\r\n        >\r\n          <Typography>Select Criteria</Typography>\r\n        </AppAccordionSummary>\r\n        <AppAccordionDetails\r\n          sx={{ mb: { xs: \"1.3rem\", lg: \"0.5rem\" }, pt: \"1.5rem\" }}\r\n        >\r\n          <Stack\r\n            direction={matchUpLg ? \"row\" : \"column\"}\r\n            alignItems={matchUpLg ? \"start\" : \"center\"}\r\n            justifyContent={matchUpLg ? \"space-between\" : \"center\"}\r\n            spacing={4}\r\n            sx={{ flexWrap: \"wrap\" }}\r\n          >\r\n            <CurrencySelection />\r\n            <TimeRangeSelection />\r\n          </Stack>\r\n        </AppAccordionDetails>\r\n      </AppAccordion>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default React.memo(SelectionCriteriaSection);\r\n","import { Box, Skeleton, Typography } from \"@mui/material\";\r\nimport useTheme from \"@mui/material/styles/useTheme\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\nimport {\r\n  getTimeRangeDescriptorFromUrlQuery,\r\n  TIME_RANGE_QUERY_IN_URL,\r\n} from \"../../@types-and-const/@url-queries/@time-range\";\r\nimport { useCurrencyRateQuery } from \"../../api/currency/currencyRatesApi\";\r\nimport useUpdateAppBarTitle from \"../../components/appbar/title-provider/useUpdateAppBarTitle\";\r\nimport { CURRENCY_ROUTE } from \"../../routes/currencyRoute\";\r\nimport BestInvestmentIndicator from \"./components/BestInvestmentIndicator\";\r\nimport CurrencyChart from \"./components/CurrencyChart\";\r\nimport SelectionCriteriaSection from \"./components/SelectionCriteriaSection\";\r\nimport useGetSelectedCurrencyFromUrl from \"./hooks/useGetSelectedCurrencyFromUrl\";\r\n\r\nconst Currency = () => {\r\n  const theme = useTheme();\r\n\r\n  useUpdateAppBarTitle(CURRENCY_ROUTE.text);\r\n\r\n  const [searchParams] = useSearchParams();\r\n\r\n  const selectedCurrency = useGetSelectedCurrencyFromUrl(searchParams);\r\n\r\n  const {\r\n    timeRangeForDataFetching: [startDate, endDate],\r\n  } = getTimeRangeDescriptorFromUrlQuery(\r\n    searchParams.get(TIME_RANGE_QUERY_IN_URL.key)\r\n  );\r\n\r\n  const {\r\n    // data: currencyRates,\r\n    // error,\r\n    // isLoading,\r\n    isFetching,\r\n    currentData: currencyRates,\r\n  } = useCurrencyRateQuery(\r\n    { selectedCurrency, startDate, endDate },\r\n    {\r\n      refetchOnMountOrArgChange: true,\r\n      refetchOnFocus: true,\r\n      refetchOnReconnect: true,\r\n    }\r\n  );\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: \"flex\",\r\n        flex: \"auto\",\r\n        flexDirection: \"column\",\r\n      }}\r\n    >\r\n      <SelectionCriteriaSection />\r\n      <Box component=\"section\" sx={{ maxWidth: \"100%\" }}>\r\n        <Typography\r\n          variant=\"h5\"\r\n          component=\"h1\"\r\n          sx={{\r\n            mb: \"1rem\",\r\n            [theme.breakpoints.down(\"sm\")]: {\r\n              textAlign: \"center\",\r\n            },\r\n          }}\r\n        >\r\n          {`Actual rate ${selectedCurrency}/PLN: ${\r\n            currencyRates?.rates.at(-1)?.mid ?? \"-\"\r\n          } zł.`}\r\n        </Typography>\r\n      </Box>\r\n      {isFetching && false ? (\r\n        <Skeleton variant=\"rectangular\" width=\"90%\" height={500} />\r\n      ) : (\r\n        <>\r\n          <CurrencyChart rates={currencyRates?.rates} isFetching={isFetching} />\r\n          <BestInvestmentIndicator\r\n            rates={currencyRates?.rates}\r\n            isFetching={isFetching}\r\n          />\r\n        </>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Currency;\r\n"],"names":["title","setTitleContext","useSetAppBarTitleContext","useEffect","dateToString","date","year","getFullYear","month","getMonth","day","getDate","yearString","String","monthString","length","dayString","getDateRangeFromNowToPast","differenceInDays","endDate","Date","startDate","setDate","isDateValid","Number","isNaN","stringToDate","dateString","dateFragments","match","TIME_RANGE_QUERY_IN_URL","key","allowedValues","TIME_RANGE_QUERY_IN_URL_CONFIG","week","queryValue","valueInDays","uiName","max","DEFAULT_DEFINED_VALUE","DEFAULT_TIME_RANGE_IN_DAYS","getTimeRangeDescriptorFromUrlQuery","timeRangeQueryInUrl","value","timeRangeForIOFields","datesMatch","getTimeRangeForIOFields","timeRangeForDataFetching","selectedDefinedValue","undefined","find","element","rates","isFetching","theme","useTheme","bestInvestment","useMemo","reduce","previousBestInvestment","buyRate","buyRateIndex","array","maxRateSinceBuyRate","slice","prevMaxRate","rate","mid","maxRefund","refund","refundInPercentage","Math","floor","buyDate","effectiveDate","sellDate","Skeleton","displayedText","Typography","variant","sx","minWidth","Box","flex","breakpoints","down","flexDirection","display","justifyContent","alignItems","minHeight","mb","ResponsiveContainer","width","height","className","cx","styles","animation","AreaChart","data","margin","top","right","left","bottom","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","XAxis","dataKey","YAxis","domain","dataMin","dataMax","stroke","ceil","CartesianGrid","strokeDasharray","Tooltip","labelStyle","color","palette","text","primary","contentStyle","backgroundColor","background","default","Area","type","fillOpacity","fill","name","Legend","AppAccordion","styled","props","Accordion","elevation","square","border","divider","AppAccordionDetails","AccordionDetails","padding","spacing","borderTop","AppAccordionSummary","AccordionSummary","expandIcon","ArrowForwardIosSharp","fontSize","marginLeft","mode","control","fieldName","minAllowedDate","shouldReserveSpaceForErrorMessage","validationRules","rules","render","field","fieldState","DatePicker","mask","disableFuture","openTo","views","minDate","onChange","inputRef","ref","renderInput","params","TextField","error","Boolean","helperText","message","onBlur","setQueryInUrl","searchParams","setSearchParams","queryKey","newSearchParamsInstance","URLSearchParams","set","delete","setValue","getValues","dates","shouldValidate","reset","IconButton","onClick","removeQueryFromUrl","HighlightOff","MIN_ALLOWED_DATE","validationSchema","Yup","typeError","required","CustomTimeRangeSelection","matchDownSm","useMediaQuery","matchDownMd","useSearchParams","useForm","defaultValues","criteriaMode","shouldUnregister","resolver","yupResolver","handleSubmit","watch","errors","formState","get","useUpdateTimeRangeBasedOnUrl","onSubmit","values","noValidate","Stack","direction","flexWrap","Button","size","disabled","Object","keys","React","ToggleButtonGroup","exclusive","_","ToggleButton","TimeRangeSelection","matchDownXl","matchOnlyLg","only","pt","flexGrow","valueFromUrlQuery","substituteValue","validationFunction","typeGuardValue","getValueFromUrlQueryTypeGuard","SELECTED_CURRENCY_QUERY_IN_URL_KEY_NAME","DEFAULT_SELECTED_CURRENCY","isValidSelectedCurrencyQueryInUrl","CurrencySelection","selectedCurrency","useGetSelectedCurrencyFromUrl","FormControl","m","InputLabel","Select","labelId","e","target","label","autoWidth","MenuItem","USD_CURRENCY","EUR_CURRENCY","SelectionCriteriaSection","useState","isAccordionExpanded","SetIsAccordionExpanded","matchUpLg","up","component","expanded","prev","ExpandMore","xs","lg","useUpdateAppBarTitle","CURRENCY_ROUTE","useCurrencyRateQuery","refetchOnMountOrArgChange","refetchOnFocus","refetchOnReconnect","currencyRates","currentData","maxWidth","textAlign","at"],"sourceRoot":""}